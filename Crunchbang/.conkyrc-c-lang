# conky configuration
#
# The list of variables has been removed from this file in favour
# of keeping the documentation more maintainable.
# Check http://conky.sf.net for an up-to-date-list.
#
# For ideas about how to modify conky, please see:
# http://crunchbanglinux.org/forums/topic/59/my-conky-config/
#
# For help with conky, please see:
# http://crunchbanglinux.org/forums/topic/2047/conky-help/
#
# Enjoy! :)
##############################################
# Settings
##############################################
background yes
use_xft yes
xftfont Liberation Sans:size=9
xftalpha 1
update_interval 1.0
total_run_times 0
own_window yes
own_window_transparent yes
own_window_type desktop
#own_window_argb_visual yes
own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager
double_buffer yes
minimum_size 200 200
maximum_width 270
draw_shades no
draw_outline no
draw_borders no
draw_graph_borders no
default_color 444444 # for white background
#default_color 828282
#default_color b5b5b5 # for dark background
default_shade_color 000000
default_outline_color 828282
alignment top_left
gap_x 12
gap_y 24
no_buffers yes
uppercase no
cpu_avg_samples 2
override_utf8_locale no
##############################################
#  Output
##############################################
TEXT

${hr}
K E Y W O R D S $alignr C
${font Liberation Sans:size=8}auto, break, case, char, continue, default, do, double,
else, extern, float, for, goto, if, int, long, register, return,
short, sizeof, static, struct, switch, typedef, union,
unsigned, while
${hr}
C89: const, enum, signed, void, volatile
${hr}
C99: inline, restrict, _Bool, _Complex, _Imaginary
${hr}
C11: _Alignas, Alignof, _Atomic, _Generic, Noreturn,
_Static_assert, _Thread_local
${hr}
${font Liberation Sans:size=9}E X A C T   I N T E G E R
${font Liberation Sans:size=8}(u)intN_t $alignr exactly N bits (opt)
(u)int_leastN_t $alignr least N bits (min)
(u)int_fastN_t $alignr fastest least N bits (min)
(u)intmax_t $alignr widest implemented integer type
(u)intptr_t $alignr wide enough to store a pointer (opt)
min for N = 8, 16, 32, 64
${hr}
${font Liberation Sans:size=9}C H E A T   S H E E T
${font Liberation Sans:size=8}[expression];
{ [list of declarations and statements] }
(type name){ list-of-initializers }
expression1, expression2
${hr}
for ( [initialization]; [controlling]; [adjustment] ) statement
while ( expression ) statement
do statement while ( expression );
if ( expression ) statement1 [else statement2]
condition ? expression1 : expression2
${hr}
switch ( expression ) statement
case constant: statement [break;]
default: statement [break;]
${hr}
goto label_name;
label_name: statement
return [expression];
${hr}
[typedef | storage_class_specifier] type declarator
	[, declarator [, ...]];
storage_class_specifier = auto, register, static,
		_Thread_local, extern
type qualifiers = const, volatile, restrict
${hr}
enum [identifier] { enumerator-list };
struct [tag_name] { member_declaration_list };
union  [tag_name] { member_declaration_list };
type [member_name] : width;
${hr}
type * [type-qualifier-list] name [= initializer];
type (*funcPtr)(parameter-list) [= initializer];
void *malloc(size_t size);
void *calloc(size_t count, size_t size);
void free(void *ptr);
void *realloc(void *pter, size_t size);
